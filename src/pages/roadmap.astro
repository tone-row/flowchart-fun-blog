---
import { getIssues } from '../components/linear';
import Layout from '../layouts/Layout.astro';
import { marked } from 'marked';

const issues = (await getIssues()).nodes.map(issue => {
  return {
    title: issue.title,
    description: marked.parse(issue.description ?? ""),
  }
});
---
<Layout title="Roadmap">
  <h1>Flowchart Fun Roadmap</h1>
  <h2>Active Tasks</h2>
  <div class="issues">
    {issues.map(issue => (
      <div class="issue">
        <h3>{issue.title}</h3>
        <div class="issue-description" set:html={issue.description} />
      </div>
    ))}
  </div>
  <h2>Areas of Research</h2>
  <div class="issues">

    <div class="issue">
      <h3>Migrating to Graph Selector Syntax</h3>
      <div class="issue-description">
        <p>
          Over the next 3-6 months we will migrate to a slightly different syntax. The reasons are outlined in this post. The strategy for migrating will be outlined in an upcoming post. You can checkout examples of the upcoming syntax here: <a href="https://graph-selector-syntax.tone-row.com">https://graph-selector-syntax.tone-row.com</a>
        </p>
      </div>
    </div>
    <div class="issue">
      <h3>VS Code and PKMS Integration</h3>
      <div class="issue-description">
        <p>
          The goal is to bring Flowchart Fun syntax and generated graphs to a VS Code extension as well as to Personal Knowledge Management Systems (PKMS) like Roam Research and Obsidian. This was part of the impetus for extracting the syntax into a separate package.
        </p>
      </div>
    </div>
  </div>
</Layout>

<style>
  h2 {
    margin: 40px 0 10px;
    color: var(--blue-500);
  }
  h3 {
    /* font-weight: 400; */
    font-size: 1.25rem;
  }

  .issue {
    display: grid;
    gap: 5px;
  }

  .issue * {
    margin: 0;
  }

  .issues {
    display: grid;
    gap: 40px;
  }
</style>

<style is:global>
  .issue-description * {
    margin: 0;
  }

  .issue-description a {
    color: var(--blue-500);
  }
</style>